import * as ss from 'npm:simple-statistics@^7.0.0'
import * as pl from '../lib/index.ts'
import * as mt from 'npm:mathjs@^13.0.0'

const x: number[] = new Array(1000).fill(0).map(() => Math.random() * 100)
const y: number[] = new Array(1000).fill(0).map(() => Math.random() * 100)

Deno.bench('Base Bench - @psych/lib', () => {
  pl.sum(x)
  pl.mean(x)
  pl.max(x)
  pl.min(x)
  pl.median(x)
  pl.quantile(x, 0.25)
  pl.quantile(x, 0.75)
  pl.vari(x)
  pl.std(x)
  pl.corr(x, y)
  pl.cov(x, y)
  pl.kurtosis(x)
  pl.skewness(x)
  pl.sort(x)
  pl.sort(x, false)
  pl.mode(x)
  pl.range(x)
  pl.ss(x)
  pl.ssDiff(x, y)
  pl.sp(x, y)
  pl.sem(x)
})

Deno.bench('Base Bench - @psych/lib perf', () => {
  pl.sum(x)
  const mx = pl.mean(x)
  const my = pl.mean(y)
  const s = pl.sort(x)
  pl.sort(x, false)
  pl.max(s, true)
  pl.min(s, true)
  pl.median(s, true)
  pl.quantile(s, 0.25, true)
  pl.quantile(s, 0.75, true)
  pl.vari(x, true, mx)
  pl.std(x, true, mx)
  pl.corr(x, y, [mx, my])
  pl.cov(x, y, true, [mx, my])
  pl.kurtosis(x, true, mx)
  pl.skewness(x, true, mx)
  pl.mode(x)
  pl.range(x, true)
  pl.ss(x, mx)
  pl.ssDiff(x, y)
  pl.sp(x, y, [mx, my])
  pl.sem(x, true, mx)
})

Deno.bench('Base Bench - others', () => {
  ss.sum(x)
  const mx = ss.mean(x)
  const my = ss.mean(y)
  ss.max(x)
  ss.min(x)
  ss.median(x)
  ss.quantile(x, 0.25)
  ss.quantile(x, 0.75)
  ss.sampleVariance(x)
  ss.sampleStandardDeviation(x)
  ss.sampleCorrelation(x, y)
  ss.sampleCovariance(x, y)
  ss.sampleKurtosis(x)
  ss.sampleSkewness(x)
  mt.sort(x, 'asc')
  mt.sort(x, 'desc')
  3 * ss.median(x) - 2 * ss.mean(x)
  ss.max(x) - ss.min(x)
  ss.sum(x.map((v) => (v - mx) ** 2))
  ss.sum(x.map((v, i) => (v - y[i]) ** 2))
  ss.sum(x.map((v, i) => (v - mx) * (y[i] - my)))
  ss.sampleStandardDeviation(x) / Math.sqrt(x.length)
})
